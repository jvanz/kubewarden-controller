name: kubewarden-controller release
on:
  push:
    tags:
    - 'v*'

# Declare default permissions as read only.
permissions: read-all

jobs:
  ci:
    uses: kubewarden/kubewarden-controller/.github/workflows/ci.yml@main
    permissions: read-all

  container-build:
    uses: kubewarden/kubewarden-controller/.github/workflows/container-build.yml@main
    permissions:
      id-token: write
      packages: write
  release:
    permissions:
      id-token: write
      contents: write
    name: Create release
    runs-on: ubuntu-latest
    needs:
      - ci
      - container-build
    steps:
      - name: Install Golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      - name: Install the bom command
        shell: bash
        run: go install sigs.k8s.io/bom/cmd/bom@v0.2.2

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Retrieve tag name
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo TAG_NAME=$(echo ${{ github.ref }} | sed -e "s|refs/tags/||") >> $GITHUB_ENV

      - name: Create SBOM file
        shell: bash
        run: |
          bom generate -n https://kubewarden.io/kubewarden.spdx \
            --image "ghcr.io/${{github.repository_owner}}/kubewarden-controller@${{ needs.container-build.outputs.digest }}" \
            . > kubewarden-controller-sbom.spdx

      - name: Sign BOM file
        run: |
          cosign sign-blob --output-certificate kubewarden-controller-sbom.spdx.cert \
            --output-signature kubewarden-controller-sbom.spdx.sig \
            kubewarden-controller-sbom.spdx
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Get draft release ID
        uses: actions/github-script@v6
        with:
          script: |
            const {TAG_NAME} = process.env
            let release = await github.rest.repos.getReleaseByTag({
               owner: context.repo.owner,
               repo: context.repo.repo,
               tag: `${TAG_NAME}`
            });
            for (const release of releases.data) {
              if (release.name == `Draft`) {
                      core.exportVariable('RELEASE_ID', release.id)
                      return
              }
            }
            core.setFailed(`Draft release not found`)

      - name: Upload release assets
        uses: actions/github-script@v6
        with:
          script: |
            let fs = require('fs');
            let files = ['kubewarden-controller-sbom.spdx', 'kubewarden-controller-sbom.spdx.cert', 'kubewarden-controller-sbom.spdx.sig']
            const {RELEASE_ID} = process.env

            for (const file of files) {
              let file_data = fs.readFileSync(file);

              github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: `${RELEASE_ID}`,
                name: file,
                data: file_data,
              });
            }

      - name: Publish release
        uses: actions/github-script@v6
        with:
          script: |
            const {RELEASE_ID} = process.env
            const {TAG_NAME} = process.env
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: `${RELEASE_ID}`,
              draft: false,
              tag_name: `${TAG_NAME}`,
              name: `${TAG_NAME}`
            });

      - name: Get latest release tag
        uses: actions/github-script@v6
        with:
          script: |
            let release = await github.rest.repos.getLatestRelease({
               owner: context.repo.owner,
               repo: context.repo.repo,
            });
            if (release) {
              core.exportVariable('LAST_RELEASE_TAG', release.tag_name)
            } else {
              core.setFailed(`Latest release not found`)
            }
      - name: Get update version type
        id: get-update-type
        shell: bash
        run: |
          OLD_VERSION=LAST_RELEASE_TAG
          NEW_VERSION=$TAG_NAME

          SED_REGEX="v\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)\(.*\)"

          OLD_MAJOR=$(echo $OLD_VERSION | sed  --quiet "s/$SED_REGEX/\1/p")
          OLD_MINOR=$(echo $OLD_VERSION | sed  --quiet "s/$SED_REGEX/\2/p")
          OLD_PATCH=$(echo $OLD_VERSION | sed  --quiet "s/$SED_REGEX/\3/p")

          NEW_MAJOR=$(echo $NEW_VERSION | sed  --quiet "s/$SED_REGEX/\1/p")
          NEW_MINOR=$(echo $NEW_VERSION | sed  --quiet "s/$SED_REGEX/\2/p")
          NEW_PATCH=$(echo $NEW_VERSION | sed  --quiet "s/$SED_REGEX/\3/p")

          if [ $NEW_MAJOR -gt $OLD_MAJOR ]; then
              echo "UPDATE_TYPE=major" >> $GITHUB_OUTPUT
              exit 0
          fi
          if [ $NEW_MINOR -gt $OLD_MINOR ]; then
              echo "UPDATE_TYPE=minor" >> $GITHUB_OUTPUT
              exit 0
          fi
          if [ $NEW_PATCH -gt $OLD_PATCH ]; then
              echo "UPDATE_TYPE=patch" >> $GITHUB_OUTPUT
              exit 0
          fi

          exit 1

      - name: Trigger chart update
        shell: bash
        run: echo "Update type is ${{ steps.get-update-type.outputs.UPDATE_TYPE }}"

      - name: Trigger Helm chart release
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.HELM_CHART_REPO_ACCESS_TOKEN }}
          repository: "${{github.repository_owner}}/helm-charts"
          event-type: chart-release
          client-payload: '{"update_type": "${{ steps.get-update-type.outputs.UPDATE_TYPE }}"}'

